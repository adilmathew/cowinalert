from cowin_api import CoWinAPI
import pandas as pd
from copy import deepcopy
import datetime
from decouple import config
import smtplib
from email.message import EmailMessage
import time

# Either insert your emails and password here or use python-decouple or follow this article https://saralgyaan.com/posts/set-passwords-and-secret-keys-in-environment-variables-maclinuxwindows-python-quicktip/

FROM_EMAIL = config('FROM_EMAIL')
TO_EMAIL = config('TO_EMAIL')
PASSWORD = config('PASSWORD')

# Just Change these values
no_of_days = 7    # Change this to 7,14,21 or 28
pincodes = ['141001']  # Add as many pincodes as you want separated by commas
min_age_limit = 45  # Change this to 18 if you want 18+

BASE_DATE = datetime.datetime.now()
DATE_LIST = date_list = [BASE_DATE + datetime.timedelta(days=x * 7) for x in range(int(no_of_days / 7))]

dates = [date.strftime("%d-%m-%Y") for date in date_list]

# Start the API
cowin = CoWinAPI()


def send_email(text_file: str):
    """ This function sends the email if the Vaccination slot is available

    Parameters
    ----------
    text_file: str
    This is a text file containing the details of all the slots available, it is generated by main function if there is an availability.

    Requires
    --------
    TO_EMAIL : str
        The email address to which you need to send the email
    FROM_EMAIL: str
        The email address from which you want to send the email
    PASSWORD: str
        Password of the FROM_EMAIL

    You can either hard code it at line 11-13 above or use python-decouple or environmental variables

    For more details about sending emails, check this article
    https://saralgyaan.com/posts/use-python-to-send-email/

    Sends
    -----
    The email
    """

    message = EmailMessage()
    message['Subject'] = 'Covid Vaccination Slot is available'
    message['From'] = FROM_EMAIL
    message['To'] = TO_EMAIL
    with open(text_file, 'r') as f:
        contents = f.readlines()
        text = '\n'.join(contents)
        final_text = f'Dear Udit,\n\n Covid Vaccination slots are available at the following locations\n {text} \n\nRegards,\n Udit'
    message.set_content(final_text)

    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
        smtp.login(FROM_EMAIL, PASSWORD)
        smtp.send_message(message)


def get_availability(pincode: str, date: str, min_age_limit: int):
    """
    This function checks the availability of the Covid Vaccination and create a pandas dataframe of the available slots details.

    Parameters
    ----------
    pincode : str
        It is provided by the user in the list on line 17
    date : str
        It is auto-generated on the basis of the no. of days for which inquiry is made. Days could be 7,14,21 or 28 (preferably).
    min_age_limit : int
        It is provided by the user at line 18

    Returns
    -------
    df : Pandas dataframe
        Containing the details of the hospital where slot is available.

    """
    results = cowin.get_availability_by_pincode(pincode, date, min_age_limit)
    master_data = results['centers']
    if master_data != []:
        df = pd.DataFrame(master_data)
        if len(df):
            df = df.explode("sessions")
            df['min_age_limit'] = df.sessions.apply(lambda x: x['min_age_limit'])
            df['vaccine'] = df.sessions.apply(lambda x: x['vaccine'])
            df['available_capacity'] = df.sessions.apply(lambda x: x['available_capacity'])
            df['date'] = df.sessions.apply(lambda x: x['date'])
            df = df[["date", "available_capacity", "vaccine", "min_age_limit", "pincode", "name", "state_name", "district_name", "block_name", "fee_type"]]
            df = df[df['available_capacity'] != 0]
            df.drop_duplicates(inplace=True)
            return df


def main():
    """
    This is the main function which uses get_availability() to check for the availability and thereafter send_email() to send the emails if the slots are available.

    Parameters
    ----------
    None
    """

    final_df = None
    for pincode in pincodes:
        for date in dates:
            temp_df = get_availability(pincode, date, min_age_limit)
            if final_df is not None:
                final_df = pd.concat([final_df, temp_df])
            else:
                final_df = deepcopy(temp_df)
    if final_df is not None:
        final_df.set_index('date', inplace=True)
        final_df.to_csv(r'availability.txt', sep=' ', mode='a')
        send_email('availability.txt')


if __name__ == '__main__':

    main()  # comment this

    # If you want to continuosly run it in background comment the above line and uncomment the following lines and the function will be repeated after every 15 minutes

    # while True:
    #     main()
    #     time.sleep(900)
